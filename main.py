#Jack GUI
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'jackGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1190, 589)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 150, 1091, 591))
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(-110, -110, 1331, 811))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("C:/Users/Admin/Downloads/212508.gif"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(890, 520, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color: rgb(85, 85, 255);")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(1010, 520, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("background-color: rgb(255, 0, 0);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(30, 40, 241, 71))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, -30, 361, 191))
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap("C:/Users/Admin/Downloads/jarvis2.gif"))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(70, 140, 251, 181))
        self.label_5.setText("")
        self.label_5.setPixmap(QtGui.QPixmap("C:/Users/Admin/Downloads/jarvis3.gif"))
        self.label_5.setScaledContents(True)
        self.label_5.setObjectName("label_5")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(730, 10, 211, 41))
        self.textBrowser.setStyleSheet("\n"
                                       "background:transparent;\n"
                                       "color:white;\n"
                                       "font-size:30px;")
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(950, 10, 211, 41))
        self.textBrowser_2.setStyleSheet("\n"
                                         "background:transparent;\n"
                                         "color:white;\n"
                                         "font-size:30px;")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(880, 360, 241, 141))
        self.label_6.setText("")
        self.label_6.setPixmap(QtGui.QPixmap("C:/Users/Admin/Downloads/jarvis1.gif"))
        self.label_6.setScaledContents(True)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(80, 410, 121, 101))
        self.label_7.setStyleSheet("baground:transparent")
        self.label_7.setText("")
        self.label_7.setPixmap(QtGui.QPixmap("C:/Users/Admin/Downloads/jarvis1.gif"))
        self.label_7.setScaledContents(True)
        self.label_7.setObjectName("label_7")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Start"))
        self.pushButton_2.setText(_translate("MainWindow", "Exit"))
        self.label_3.setText(_translate("MainWindow", "TextLabel"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

#Jack's Functions== == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == =
import speech_recognition as sr  # this module help to recognize the voice of a perticular person
import datetime  # used for time and date
import pyttsx3  # this module will help to convert our voice into text
import wikipedia
import webbrowser
import os
import speedtest
import random
from requests import get
import requests
import smtplib
import sys
import psutil
# import pywhatkit as kit
from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtCore import QTimer, QTime, QDate, Qt
from PyQt5.QtGui import QMovie
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.uic import loadUiType
from twilio.rest import Client
from jackGUI import Ui_MainWindow

engine = pyttsx3.init('sapi5')
voices = engine.getProperty('voices')


# print(voices[0].id)


# this line is to find whether the voice is boys or girls

def speak(audio):  # this function will speak the text
    engine.say(audio)
    print(audio)
    engine.runAndWait()


def wishme():  # this function will calculate the hour and will respond accordingly
    hour = int(datetime.datetime.now().hour)
    if hour >= 0 and hour < 12:
        speak("Good morning Sir!, i am jack. How may I help you ?")
        print(speak)
    elif hour >= 12 and hour < 18:
        speak("Good afternoon Sir!,i am jack. How may I help you ?")
        print(speak)
    else:
        speak("Good Evening Sir!, i am jack. How may I help you")
        print(speak)


def sendEmail(to, content):
    sender_mail = "himanshulodhi23@gmail.com"
    password = "44448888"
    server = smtplib.SMTP("smtp.gmail.com", 587)
    server.ehlo()
    server.starttls()
    server.login('sender_mail', 'password')
    server.sendmail('sender_mail', to, content)
    server.close()


class MainThread(QThread):

    def __init__(self):
        super(MainThread, self).__init__()

    def run(self):
        self.TaskExecution()

    def takecommand(self):  # this function will recognize what the user is saying
        r = sr.Recognizer()
        with sr.Microphone() as source:
            print("Listening....")
            r.pause_threshold = 2  # it will wait 2 second in every pause
            audio = r.listen(source)

        try:
            print("Recognizing...")
            self.query = r.recognize_google(audio, language='en-in')
            print(f"User said: {self.query}\n")

        except Exception as e:
            speak("Say it again please....")
            return "None"
        return self.query

    def TaskExecution(self):
        wishme()
        while True:
            self.query = self.takecommand().lower()
            # logic for executing tasks based of query
            if 'wikipedia' in self.query:
                speak("Searching wikipedia...")
                self.query = self.query.replace("wikipedia", "")
                result = wikipedia.summary(self.query, sentences=3)
                speak("According to wikipedia..")
                speak(result)
                print(result)
            elif 'open youtube' in self.query:
                # webbrowser.open("youtube.com")
                speak("Sir,what should i search on youtube")
                cm = self.takecommand().lower()
                webbrowser.open(f"{cm}")
            elif 'open google' in self.query:
                # webbrowser.open("google.com")
                speak("Sir,what should i search on google")
                cm = self.takecommand().lower()
                webbrowser.open(f"{cm}")
            elif 'open geek for geeks' in self.query:
                webbrowser.open_new("https://www.geeksforgeeks.org/")
            elif 'open g f g' in self.query:
                webbrowser.open_new("https://www.geeksforgeeks.org/")
            elif 'open notepad' in self.query:
                npath = "C:\\WINDOWS\\system32\\notepad.exe"
                os.startfile(npath)
            elif 'open command prompt' in self.query:
                os.system("start cmd")
            elif 'play music' in self.query:
                music_dr = "C:\\Users\\Admin\\Music\\music"
                songs = os.listdir(music_dr)
                rd = random.choice(songs)
                os.startfile(os.path.join(music_dr, rd))
            elif 'ip address' in self.query:
                speak("wait sir, let me check")
                ip = get('https://api.ipify.org').text
                speak(f"Your ip address is {ip}")
            elif 'close nodepad' in self.query:
                speak("okay sir, closing notepad")
                os.system("taskkill /f /im notepad.exe")
            # elif 'open camera' in query:
            #     try:
            #         cap = cv2.VideoCapture(0)
            #         while True:
            #             ret, img = cap.read()
            #             cv2.imshow('webcam', img)
            #             k = cv2.waitkey(58)
            #             if k == 27:
            #                 break
            #         cap.release()
            #         cv2.destroyAllWindows()
            #     except Exception as e:
            #         print(e)
            #         speak("sorry sir unable to do this")
            # elif 'send message' in self.query:
            #     try:
            #         speak("sir,whom do you wand to send a message")
            #         if 'Bhai' in self.query:
            #             speak("sir,what message do you want to send")
            #             mg = self.takecommand().lower()
            #             kit.sendwhatmsg(f"+919627104523,{mg}")
            #     except Exception as e:
            #         print(e)
            #         speak("sorry sir unable to do this")
            # elif 'play songs on youtube' in self.query:
            #     try:
            #         speak("sir which song whould you like to listen")
            #         sng = self.takecommand().lower()
            #         kit.playonyt(sng)
            #     except Exception as e:
            #         print(e)
            #         speak("sorry sir umable to do this")
            elif 'email to himanshu' in self.query:
                try:
                    speak("what do you want to send")
                    content = self.takecommand().lower()
                    to = "nagarhimanshu925@gmail.com"
                    # subject = self.takecommand().lower()
                    sendEmail(to, content)
                    speak("Email has been sent")
                except Exception as e:
                    print(e)
                    speak("could not send the email")
            elif 'where i am' in self.query or 'find our localtion' in self.query:
                speak("wait sir, let me check")
                try:
                    ipAdd = requests.get('https://api.ipify.org').text
                    print(ipAdd)
                    url = 'https://get.geojs.io/v1/ip/geo/' + ipAdd + '.json'
                    geo_requests = requests.get(url)
                    geo_data = geo_requests.json()
                    state = geo_data['state']
                    country = geo_data['country']
                    speak(f"sir i am not sure but, i think we are in {state} state of {country} country")
                except Exception as e:
                    speak("sorry sir cannot find the location")
                    pass
            # elif 'how much power is left' or 'how much battery is left' in self.query:
            #     battery = psutil.sensors_battery()
            #     percentage = battery.percent
            #     speak(f"sir our system have {percentage} percent power")
            elif 'send message to himanshu' in self.query:
                try:
                    speak("sir what message do you want to send")
                    msg = self.takecommand().lower()
                    account_sid = 'AC91c6d22f94b227381230ee94fe0801af'
                    auth_token = '7fafea372eba6790686a2ff7e51447ce'
                    client = Client(account_sid, auth_token)

                    message = client.messages \
                        .create(
                        body=msg,
                        from_='+14847490787',
                        to='+919690520019'
                    )
                    speak("Message has been sent")
                except Exception as e:
                    speak("could not sent the message")

            elif 'check the internet speed' in self.query:
                speak("okay sir, let me check")
                st = speedtest.Speedtest()
                ds = st.download()
                ds_mb = int(ds / 1048576)
                us = st.upload()
                us_mb = int(us / 1048576)
                speak(f"sir we have {ds_mb} mb per second downloading speed and {us_mb} mb per second uploading speed")
            elif 'you can leave' in self.query:
                speak("thanks for using me sir, have a good day")
                sys.exit()


startExecution = MainThread()


class Main(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.ui.pushButton.clicked.connect(self.startTask)
        self.ui.pushButton_2.clicked.connect(self.close)

    def startTask(self):
        self.ui.movie = QtGui.QMovie("C:/Users/Admin/Downloads/212508.gif")
        self.ui.label_2.setMovie(self.ui.movie)
        self.ui.movie.start()
        self.ui.movie = QtGui.QMovie("C:/Users/Admin/Downloads/jarvis1.gif")
        self.ui.label_6.setMovie(self.ui.movie)
        self.ui.movie.start()
        self.ui.movie = QtGui.QMovie("C:/Users/Admin/Downloads/jarvis1.gif")
        self.ui.label_7.setMovie(self.ui.movie)
        self.ui.movie.start()
        self.ui.movie = QtGui.QMovie("C:/Users/Admin/Downloads/jarvis2.gif")
        self.ui.label_4.setMovie(self.ui.movie)
        self.ui.movie.start()
        self.ui.movie = QtGui.QMovie("C:/Users/Admin/Downloads/jarvis3.gif")
        self.ui.label_5.setMovie(self.ui.movie)
        self.ui.movie.start()
        timer = QTimer(self)
        timer.timeout.connect(self.showTime)
        timer.start(1000)
        startExecution.start()

    def showTime(self):
        current_time = QTime.currentTime()
        current_date = QDate.currentDate()
        label_time = current_time.toString('hh:mm:ss')
        label_date = current_date.toString(Qt.ISODate)
        self.ui.textBrowser.setText(label_time)
        self.ui.textBrowser_2.setText(label_date)


app = QApplication(sys.argv)
jack = Main()
jack.show()
exit(app.exec_())






